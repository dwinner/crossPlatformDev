<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>MvvmCross property</Title>
      <Author>Xiaodi Yan</Author>
      <Shortcut>mvxpropdp</Shortcut>
      <Description>
        A property in a ViewModel in the Xamarin project with MvvmCross.
      </Description>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>Property</ID>
          <ToolTip>Property name</ToolTip>
          <Default>Property</Default>
        </Literal>
        <Object>
          <ID>type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>string</Default>
        </Object>
        <Literal>
          <ID>pProperty</ID>
          <ToolTip>Private property name</ToolTip>
          <Default>property</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[#region $Property$;
		private $type$ _$pProperty$;
        public $type$ $Property$
        {
            get => _$pProperty$;
            set => SetProperty(ref _$pProperty$, value);
        }
		#endregion]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>MvvmCross command</Title>
      <Author>XiaodiYan</Author>
      <Shortcut>mvxcmd</Shortcut>
      <Description>
        A command in a ViewModel in the Xamarin project with MvvmCross.
      </Description>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>MvvmCross.Commands</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>Command</ID>
          <ToolTip>Command name</ToolTip>
          <Default>MyCommand</Default>
        </Literal>
        <Literal>
          <ID>pCommand</ID>
          <ToolTip>Private command name</ToolTip>
          <Default>myCommand</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        #region $Command$Command;
        private IMvxCommand _$pCommand$Command;
		    public IMvxCommand $Command$Command
        {
            get
            {
                _$pCommand$Command = _$pCommand$Command ?? new MvxCommand($Command$);
                return _$pCommand$Command;
            }
        }
        private void $Command$()
        {
            // Implement your logic here.
        }
		    #endregion]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>MvvmCross command with a parameter</Title>
      <Author>XiaodiYan</Author>
      <Shortcut>mvxcmdp</Shortcut>
      <Description>
        A command with a parameter in a ViewModel in the Xamarin project with MvvmCross.
      </Description>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>MvvmCross.Commands</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>Command</ID>
          <ToolTip>Command name</ToolTip>
          <Default>MyCommand</Default>
        </Literal>
        <Object>
          <ID>type</ID>
          <ToolTip>Parameter type</ToolTip>
          <Default>string</Default>
        </Object>
        <Literal>
          <ID>pCommand</ID>
          <ToolTip>Private command name</ToolTip>
          <Default>myCommand</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        #region $Command$Command;
        private IMvxCommand<$type$> _$pCommand$Command;
		    public IMvxCommand<$type$> $Command$Command
        {
            get
            {
                _$pCommand$Command = _$pCommand$Command ?? new MvxCommand<$type$>($Command$);
                return _$pCommand$Command;
            }
        }
        private void $Command$($type$ param)
        {
            // Implement your logic here.
        }
		    #endregion]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>MvvmCross async command</Title>
      <Author>XiaodiYan</Author>
      <Shortcut>mvxcmda</Shortcut>
      <Description>
        An async command in a ViewModel in the Xamarin project with MvvmCross.
      </Description>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>MvvmCross.Commands</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>Command</ID>
          <ToolTip>Command name</ToolTip>
          <Default>MyCommand</Default>
        </Literal>
        <Literal>
          <ID>pCommand</ID>
          <ToolTip>Private command name</ToolTip>
          <Default>myCommand</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        #region $Command$AsyncCommand;
        private IMvxAsyncCommand _$pCommand$AsyncCommand;
        public IMvxAsyncCommand $Command$AsyncCommand
        {
            get
            {
                _$pCommand$AsyncCommand = _$pCommand$AsyncCommand ?? new MvxAsyncCommand($Command$Async);
                return _$pCommand$AsyncCommand;
            }
        }
        private async Task $Command$Async()
        {
            // Implement your logic here.
        }
        #endregion]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>MvvmCross async command with a parameter</Title>
      <Author>XiaodiYan</Author>
      <Shortcut>mvxcmdap</Shortcut>
      <Description>
        An async command with a parameter in a ViewModel in the Xamarin project with MvvmCross.
      </Description>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>MvvmCross.Commands</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>Command</ID>
          <ToolTip>Command name</ToolTip>
          <Default>MyCommand</Default>
        </Literal>
        <Object>
          <ID>type</ID>
          <ToolTip>Parameter type</ToolTip>
          <Default>string</Default>
        </Object>
        <Literal>
          <ID>pCommand</ID>
          <ToolTip>Private command name</ToolTip>
          <Default>myCommand</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        #region $Command$AsyncCommand;
        private IMvxAsyncCommand<$type$> _$pCommand$AsyncCommand;
        public IMvxAsyncCommand<$type$> $Command$AsyncCommand
        {
            get
            {
                _$pCommand$AsyncCommand = _$pCommand$AsyncCommand ?? new MvxAsyncCommand<$type$>($Command$Async);
                return _$pCommand$AsyncCommand;
            }
        }
        private async Task $Command$Async($type$ param)
        {
            // Implement your logic here.
        }
        #endregion]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>MvvmCross async command by MvxNotifyTask</Title>
      <Author>XiaodiYan</Author>
      <Shortcut>mvxcmdn</Shortcut>
      <Description>
        An async command by MvxNotifyTask in a ViewModel in the Xamarin project with MvvmCross. Use the IsNotCompleted/IsCompleted properties of the MvxNotifyTask to show an indicator. Using the MvxNotifyTask is a recommended way to use an async command.
      </Description>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>MvvmCross.Commands</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>Command</ID>
          <ToolTip>Command name</ToolTip>
          <Default>MyCommand</Default>
        </Literal>
        <Literal>
          <ID>pCommand</ID>
          <ToolTip>Private command name</ToolTip>
          <Default>myCommand</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        #region $Command$AsyncCommand;

        #region $Command$TaskNotifier;
        private MvxNotifyTask _$pCommand$TaskNotifier;
        /// <summary>
        /// Use the IsNotCompleted/IsCompleted properties of the $Command$TaskNotifier to show an indicator. Using the MvxNotifyTask is a recommended way to use an async command.
        /// </summary>
        /// <value>
        /// The $Command$ task notifier.
        /// </value>
        public MvxNotifyTask $Command$TaskNotifier
        {
            get => _$pCommand$TaskNotifier;
            set => SetProperty(ref _$pCommand$TaskNotifier, value);
        }
        #endregion
        
        private IMvxCommand _$pCommand$AsyncCommand;
        public IMvxCommand $Command$AsyncCommand
        {
            get
            {
                _$pCommand$AsyncCommand = _$pCommand$AsyncCommand ?? new MvxCommand(() =>
                {
                    $Command$TaskNotifier = MvxNotifyTask.Create(async () =>
                        {
                            await $Command$Async();
                        },
                        On$Command$Exception);
                });
                return _$pCommand$AsyncCommand;
            }
        }
        private async Task $Command$Async()
        {
            // Implement your logic here.
        }

        private void On$Command$Exception(Exception ex)
        {
            // Catch and log the exception here.
        }
        #endregion
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>MvvmCross async command with a parameter by MvxNotifyTask</Title>
      <Author>XiaodiYan</Author>
      <Shortcut>mvxcmdpn</Shortcut>
      <Description>
        An async command with a parameter by MvxNotifyTask in a ViewModel in the Xamarin project with MvvmCross. Use the IsNotCompleted/IsCompleted properties of the MvxNotifyTask to show an indicator. Using the MvxNotifyTask is a recommended way to use an async command.
      </Description>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>MvvmCross.Commands</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>Command</ID>
          <ToolTip>Command name</ToolTip>
          <Default>MyCommand</Default>
        </Literal>
        <Object>
          <ID>type</ID>
          <ToolTip>Parameter type</ToolTip>
          <Default>string</Default>
        </Object>
        <Literal>
          <ID>pCommand</ID>
          <ToolTip>Private command name</ToolTip>
          <Default>myCommand</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
        #region $Command$AsyncCommand;

        #region $Command$TaskNotifier;
        private MvxNotifyTask _$pCommand$TaskNotifier;
        /// <summary>
        /// Use the IsNotCompleted/IsCompleted properties of the $Command$TaskNotifier to show an indicator. Using the MvxNotifyTask is a recommended way to use an async command.
        /// </summary>
        /// <value>
        /// The $Command$ task notifier.
        /// </value>
        public MvxNotifyTask $Command$TaskNotifier
        {
            get => _$pCommand$TaskNotifier;
            set => SetProperty(ref _$pCommand$TaskNotifier, value);
        }
        #endregion
        
        private IMvxCommand<$type$> _$pCommand$AsyncCommand;
        public IMvxCommand<$type$> $Command$AsyncCommand
        {
            get
            {
                _$pCommand$AsyncCommand = _$pCommand$AsyncCommand ?? new MvxCommand<$type$>((param) =>
                {
                    $Command$TaskNotifier = MvxNotifyTask.Create(async () =>
                        {
                            await $Command$Async(param);
                        },
                        On$Command$Exception);
                });
                return _$pCommand$AsyncCommand;
            }
        }
        private async Task $Command$Async($type$ param)
        {
            // Implement your logic here.
        }

        private void On$Command$Exception(Exception ex)
        {
            // Catch and log the exception here.
        }
        #endregion
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>MvvmCross value converter</Title>
      <Author>XiaodiYan</Author>
      <Shortcut>mvxconverter</Shortcut>
      <Description>
        An MvxValueConverter in the Xamarin project with MvvmCross.
      </Description>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>MvvmCross.Converters</Namespace>
        </Import>
        <Import>
          <Namespace>System.Globalization</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>ValueFrom</ID>
          <ToolTip>The source value name</ToolTip>
          <Default>ValueFrom</Default>
        </Literal>
        <Literal>
          <ID>ValueTo</ID>
          <ToolTip>The target value name</ToolTip>
          <Default>ValueTo</Default>
        </Literal>
        <Object>
          <ID>TypeFrom</ID>
          <ToolTip>The source value type</ToolTip>
          <Default>string</Default>
        </Object>
        <Literal>
          <ID>TypeTo</ID>
          <ToolTip>The target value type</ToolTip>
          <Default>string</Default>
        </Literal>
      </Declarations>
      <Code Language="csharp">
        <![CDATA[
            public class $ValueFrom$To$ValueTo$ValueConverter : MvxValueConverter<$TypeFrom$, $TypeTo$>
    {
        protected override $TypeTo$ Convert($TypeFrom$ value, Type targetType, object parameter, CultureInfo cultureInfo)
        {
            // Implement your logic here.
        }
    }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>

</CodeSnippets>