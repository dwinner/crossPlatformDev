<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.ObjectModel.dll" #>
<#@ Assembly Name="$(ProjectDir)..\packages\Xamarin.Forms.3.5.0.169047\lib\netstandard1.0\Xamarin.Forms.Core.dll" #>
<#@ Assembly Name="$(ProjectDir)..\packages\Xamarin.Forms.3.5.0.169047\lib\netstandard1.0\Xamarin.Forms.Platform.dll" #>
<#@ Assembly Name="$(ProjectDir)..\packages\Xamarin.Forms.3.5.0.169047\lib\netstandard1.0\Xamarin.Forms.Xaml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Xamarin.Forms" #>
<#@ import namespace="System.Windows.Input" #>
<#   
    var assembly = typeof(Page).Assembly;
    var types = assembly.ExportedTypes
        .Where(
            x => !x.IsInterface
                && !x.IsGenericType
                && x.IsSubclassOf(typeof(BindableObject)))
        .OrderBy(x => x.FullName);
	var excludeInfos = new List<ExcludeInfo>
	{
		new ExcludeInfo { Type = typeof(ToolbarItem), EventName = "Activated", EventPropertyName = null  },
		new ExcludeInfo { Type = typeof(Application), EventName = "PageAppearing", EventPropertyName = null  },
		new ExcludeInfo { Type = typeof(Application), EventName = "PageDisappearing", EventPropertyName = null  },
		new ExcludeInfo { Type = typeof(WebView), EventName = "EvaluateJavaScriptRequested", EventPropertyName = null  },
	};

#>
using System;
using System.Windows.Input;
using Xamarin.Forms.Internals;

namespace Xamarin.Forms.BehaviorsPack {
<#
	foreach (var type in types)
    {
		var eventInfos = 
			type.GetEvents()
				.Where(x => 
				{	
					return x.DeclaringType == type
						&& !excludeInfos.Any(excludeInfo => excludeInfo.Type == type && excludeInfo.EventName == x.Name && excludeInfo.EventPropertyName == null);
				})
				.OrderBy(x => x.Name);
		if(eventInfos.Any())
        {
			string typeName;
			if(type.Name.EndsWith("ry"))
            {
				typeName = type.Name.Substring(0, type.Name.Length - 1) + "ies";
            }
			else
            {
				typeName = type.Name + "s";
            }
#>

	#region <#= typeName #>
	public static partial class <#= typeName #> {
<#
			foreach (var eventInfo in eventInfos)
			{
				WriteProperty(
					type, 
					eventInfo.Name, 
					typeName, 
					eventInfo.Name, 
					"On" + eventInfo.Name, 
					"EventArgs", 
					"null", 
					"        ");
                if (eventInfo.EventHandlerType.IsGenericType)
                {
                    var eventArgType = eventInfo.EventHandlerType.GenericTypeArguments.First();
					var properties = eventArgType.GetProperties().Where(propertyInfo =>
					{
						return !excludeInfos.Any(x => x.Type == type && x.EventName == eventInfo.Name && x.EventPropertyName == propertyInfo.Name)
							&& !propertyInfo.PropertyType.FullName.StartsWith("Xamarin.Forms");
					});
					if(properties.Any())
					{
						foreach (var propertyInfo in properties)
						{
							string eventArgsTypeName;
							if(eventArgType.IsGenericType)
							{
								var typeArgs = string.Join(", ", eventArgType.GenericTypeArguments.Select(x => x.FullName));
								eventArgsTypeName =
									eventArgType.FullName.Substring(0, eventArgType.FullName.IndexOf("`", StringComparison.Ordinal))
									+ "<" + typeArgs + ">";
							}
							else
							{
								eventArgsTypeName = eventArgType.FullName;
							}
							eventArgsTypeName = eventArgsTypeName.Replace("+", ".");
						

							WriteProperty(
								type, 
								eventInfo.Name, 
								typeName, 
								eventInfo.Name + "Notify" + propertyInfo.Name, 
								"On" + eventInfo.Name + "Notify" + propertyInfo.Name, 
								eventArgsTypeName, 
								"eventArgs." + propertyInfo.Name, 
								"        ");
						}
					}
				}
            }
#>
	}
	#endregion
<#
        }
#>
<#
    }
#>
}
<#
	void WriteProperty(Type baseType, string eventName, string typeName, string propertyName, string eventHandlerName, string eventArgsTypeName, string commandParameter, string indent)
	{
		PushIndent(indent);
#>

#region <#= propertyName #>
public static readonly BindableProperty <#= propertyName #>Property =
    BindableProperty.CreateAttached("<#= propertyName #>", typeof(ICommand), typeof(<#= typeName #>), null, propertyChanged:On<#= propertyName #>Changed);

public static ICommand Get<#= propertyName #>(BindableObject bindableObject)
{
    return (ICommand)bindableObject.GetValue(<#= propertyName #>Property);
}

private static void On<#= propertyName #>Changed(BindableObject bindable, object oldValue, object newValue)
{
    if (bindable is <#= baseType.Name #> target)
    {
        if (oldValue == null && newValue != null)
        {
            target.<#= eventName #> += <#= eventHandlerName #>;
        }
        else if (oldValue != null && newValue == null)
        {
            target.<#= eventName #> -= <#= eventHandlerName #>;
        }
    }
}

private static void <#= eventHandlerName #>(object o, <#= eventArgsTypeName #> eventArgs)
{
    var command = Get<#= propertyName #>((BindableObject)o);
    if (command.CanExecute(<#= commandParameter #>))
        command.Execute(<#= commandParameter #>);
}
#endregion
<#
		PopIndent();
	}
#>
<#+
	public class BindablePropertyInfo
	{
		public string PropertyName { get; set; }
		public string EventHandlerName { get; set; }
		public string EventArgsTypeName { get; set; }
		public string CommandParameter { get; set; }
	}

	public class ExcludeInfo
	{
		public Type Type { get; set; }
		public string EventName { get; set; }
		public string EventPropertyName { get; set; }
	}
#>